[tool.poetry]
name = "deep-learning-examples"
version = "0.1.0"
description = ""
authors = ["user"]

[tool.poetry.dependencies]
python = ">=3.10 <3.11"
aiohttp = "^3.7.4"
arrow = "^1.3.0"
fastai = "^2.7.13"
fastbook = "^0.0.29"
loguru = "^0.6.0"
torch = {version = "^2.1.2", source = "pytorch-gpu"}
torchvision = {version = "^0.16.2", source = "pytorch-gpu"}
torchaudio = {version = "^2.1.2", source = "pytorch-gpu"}
lightning = "^2.1.3"
tensorboard = "^2.15.1"
transformers = "^4.36.2"

[tool.poetry.group.dev.dependencies]
# Autoformat
yapf = "^0.32.0"
toml = "^0.10.2"
# Linter
ruff = "^0.1.9"
# Type checker
pyre-check = "^0.9.19"

[[tool.poetry.source]]
name = "pytorch-gpu"
url = "https://download.pytorch.org/whl/cu118"
default = false
secondary = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.yapf]
based_on_style = "pep8"
column_limit = 120
split_arguments_when_comma_terminated = true
dedent_closing_brackets = true
allow_split_before_dict_value = false

[tool.ruff]
target-version = 'py310'
line-length = 120
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "C4", # flake8-comprehensions
    "E",  # Error
    "F",  # pyflakes
    "BLE",  # flake8-blind-except
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "SIM",  # flake8-simplify
    "W",  # Warning
    "Q",  # flake8-quotes
    "YTT", # flake8-2020
    "UP",  # pyupgrade
#    "A",  # flake8-builtins
]

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator", "classmethod"]
